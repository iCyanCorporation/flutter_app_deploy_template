name: iOS CD

on:
  #push:
  #  branches: [ main ]
  #pull_request:
  #  branches: [ main ]
  workflow_dispatch:
    inputs:
      build_number:
        description: 'input a Build Number(ex:11)'
        required: true
        type: number
jobs:
  build:
    # iOSビルド用にmacOSを使う(消費ビルド時間に注意)
    runs-on: macos-latest

    steps:
      - name: Check out
        uses: actions/checkout@v4

      # Cache Flutter SDK and dependencies
      - name: Cache Flutter SDK and dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache  # Cache for Dart/Flutter packages
            ${{ runner.tool_cache }}/flutter
          key: ${{ runner.os }}-flutter-${{ hashFiles('pubspec.yaml') }} 
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Select Xcode version
        run: sudo xcode-select -switch /Applications/Xcode_15.3.app
    
      - name: install flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'
          channel: 'stable'

      # Cache Keychain (provisioning profile and certificates)
      - name: Cache Provisioning Profile and Certificates
        uses: actions/cache@v2
        with:
          path: |
            ~/Library/MobileDevice/Provisioning\ Profiles
            ~/Library/Keychains
          key: ${{ runner.os }}-certs-${{ github.sha }}

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_P12_CER_BASE64 }}
          P12_PASSWORD: ${{ secrets.IOS_P12_CER_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_MOBILEPROVISION_BASE64 }}
          EXTENSION_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_MOBILEPROVISION_EXTENSION_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.IOS_APPLE_APP_PASS }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          EXT_PP_PATH=$RUNNER_TEMP/todolist_extension_distribution.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          echo "$EXTENSION_PROVISION_PROFILE_BASE64" | base64 --decode --output $EXT_PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          cp $EXT_PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      # Cache CocoaPods
      - name: Cache CocoaPods
        uses: actions/cache@v2
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: flutter dependencies install
        run: flutter pub get

      # Install CocoaPods dependencies
      - name: Install CocoaPods
        run: |
          cd ios
          pod install

      # Apply tflite_flutter patch
      - name: Apply tflite_flutter patch
        run: |
          echo "Current directory: $(pwd)"
          echo "Contents of current directory:"
          ls -la

          TFLITE_DIR="$HOME/.pub-cache/hosted/pub.dev/tflite_flutter-0.10.4"
          PATCH_FILE="$(pwd)/tflite_flutter_fix.patch"

          if [ -f "$PATCH_FILE" ]; then
            echo "Patch file found at $PATCH_FILE. Attempting to apply patch..."

            if [ -d "$TFLITE_DIR" ]; then
              echo "Found tflite_flutter directory: $TFLITE_DIR"
              cd "$TFLITE_DIR"
              echo "Current directory after cd: $(pwd)"
              echo "Contents of patch file:"
              cat "$PATCH_FILE"

              echo "Listing contents of tflite_flutter directory:"
              ls -la

              echo "Listing contents of possible subdirectories:"
              ls -la lib/src

              if [ -f "lib/src/tensor.dart" ]; then
                echo "Applying patch to lib/src/tensor.dart..."
                patch -p0 --verbose < "$PATCH_FILE"
              else
                echo "Error: tensor.dart not found in expected directories. Patch cannot be applied."
                exit 1
              fi
            else
              echo "Error: tflite_flutter directory not found at $TFLITE_DIR"
              echo "Contents of .pub-cache/hosted/pub.dev:"
              ls -la $HOME/.pub-cache/hosted/pub.dev || echo "pub.dev directory not found"
              exit 1
            fi
          else
            echo "Patch file not found at $PATCH_FILE. Skipping patch step."
          fi
        
      # 証明書の生成
      # ProvisioningProfile をシークレットから取り出して、プロジェクトに無理やりセットする
      - name: Create environ.json
        env:
          ENVIRON_JSON: ${{ secrets.ENVIRON_JSON }}
        run: echo "$ENVIRON_JSON" > ./environ.json

      # - name: Building IPA
      #   run: |
      #     flutter build ipa --release \
      #     --dart-define-from-file=environ.json \
      #     --export-options-plist=ios/Runner/ExportOptions.plist \
      #     --build-number ${{ github.event.inputs.build_number }} \
      #     --no-codesign
          
      # - name: Building IPA with manual xcodebuild
      #   run: |
      #     xcodebuild -workspace ios/Runner.xcworkspace \
      #     -scheme Runner \
      #     -sdk iphoneos \
      #     -configuration Release \
      #     -archivePath $PWD/build/ios/archive/Runner.xcarchive \
      #     -allowProvisioningUpdates \
      #     archive

      - name: Run build_runner build
        run: dart run build_runner build --delete-conflicting-outputs

      - name: Import Code-Signing Certificates
        uses: apple-actions/import-codesign-certs@v3
        with: 
          p12-file-base64: ${{ secrets.IOS_P12_CER_BASE64 }}
          p12-password: ${{ secrets.IOS_P12_CER_PASSWORD }}
          
      - name: Building IPA
        run: |
          flutter build ipa \
          --dart-define-from-file=environ.json \
          --export-options-plist=ios/Runner/ExportOptions.plist \
          --build-number ${{ github.event.inputs.build_number }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.event.inputs.build_number }}
          release_name: "Release ${{ github.event.inputs.build_number }}"
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: false
          prerelease: false

      - name: Upload IPA to GitHub Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/ios/ipa/todolist.ipa
          asset_name: Runner_${{ github.event.inputs.build_number }}.ipa
          asset_content_type: application/octet-stream

      - name: Set up App Store Connect API Key
        run: |
          mkdir -p /Users/runner/work/flutter_app_deploy_template/flutter_app_deploy_template/private_keys
          echo "${{ secrets.APPLE_CONNECT_API_KEY_BASE64 }}" | base64 --decode > /Users/runner/work/flutter_app_deploy_template/flutter_app_deploy_template/private_keys/AuthKey_${{ secrets.APPLE_CONNECT_API_KEY }}.p8

      # - name: Upload to AppStoreConnect
      #   env:
      #     API_KEY: ${{ secrets.APPLE_CONNECT_API_KEY }}
      #     ISSUER_ID: ${{ secrets.APPLE_CONNECT_ISSUER_ID }}
      #   run: xcrun altool --upload-app --type ios -f build/ios/ipa/todolist.ipa --apiKey "$API_KEY" --apiIssuer "$ISSUER_ID"
